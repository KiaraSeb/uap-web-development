---
import TareaItem from "./Tarea.astro";
import type { Tarea } from "../type";

interface Props {
  tareas: Tarea[];
}

const { tareas } = Astro.props;
---

<tarea-list class="w-full">
  <ul id="tarea-list" class="flex flex-col gap-2 w-full">
    {tareas.map((tarea) => (
      <TareaItem
        id={tarea.id}
        content={tarea.content}
        completed={tarea.completed}
      />
    ))}
  </ul>
  <template id="tarea-item-template">
    <TareaItem id="" content="" completed={false} />
  </template>
  <p class="clear-completed" id="clear-completed">Clear Completed</p>
</tarea-list>

<script>
  import type { Tarea } from "../type";
  import type { TareaItem } from "./Tarea.astro.0.mts";

  export class TareaList extends HTMLElement {
    private list: HTMLUListElement | null = null;
    private TareaNuevaTemplate: HTMLTemplateElement | null = null;

    connectedCallback() {
      this.list = this.querySelector("ul");
      this.TareaNuevaTemplate = this.querySelector("template");
    }

    renderTareas = (tareas: Tarea[]) => {
      if (this.list) {
        this.list.innerHTML = "";
        for (const tarea of tareas) {
          this.addTarea(tarea);
        }
      }
    };

    addTarea = (tarea: Tarea) => {
      const template = this.TareaNuevaTemplate?.content.querySelector("tarea-item");
      const TareaNueva = template?.cloneNode(true) as TareaItem;

      if (this.list && TareaNueva) {
        this.list.append(TareaNueva);
        TareaNueva.setId(tarea.id);
        TareaNueva.setContent(tarea.content);
        TareaNueva.setCompleted(tarea.completed);
      }
    };
  }

  customElements.define("tarea-list", TareaList);
</script>